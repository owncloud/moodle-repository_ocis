<?php
/**
 * Photo
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Libre Graph API
 *
 * Libre Graph is a free API for cloud collaboration inspired by the MS Graph API.
 *
 * The version of the OpenAPI document: v1.0.4
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * Photo Class Doc Comment
 *
 * @description The photo resource provides photo and camera properties, for example, EXIF metadata, on a driveItem.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Photo implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'photo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'camera_make' => 'string',
        'camera_model' => 'string',
        'exposure_denominator' => 'float',
        'exposure_numerator' => 'float',
        'f_number' => 'float',
        'focal_length' => 'float',
        'iso' => 'int',
        'orientation' => 'int',
        'taken_date_time' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'camera_make' => null,
        'camera_model' => null,
        'exposure_denominator' => 'double',
        'exposure_numerator' => 'double',
        'f_number' => 'double',
        'focal_length' => 'double',
        'iso' => 'int32',
        'orientation' => 'int16',
        'taken_date_time' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'camera_make' => false,
		'camera_model' => false,
		'exposure_denominator' => false,
		'exposure_numerator' => false,
		'f_number' => false,
		'focal_length' => false,
		'iso' => false,
		'orientation' => false,
		'taken_date_time' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'camera_make' => 'cameraMake',
        'camera_model' => 'cameraModel',
        'exposure_denominator' => 'exposureDenominator',
        'exposure_numerator' => 'exposureNumerator',
        'f_number' => 'fNumber',
        'focal_length' => 'focalLength',
        'iso' => 'iso',
        'orientation' => 'orientation',
        'taken_date_time' => 'takenDateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'camera_make' => 'setCameraMake',
        'camera_model' => 'setCameraModel',
        'exposure_denominator' => 'setExposureDenominator',
        'exposure_numerator' => 'setExposureNumerator',
        'f_number' => 'setFNumber',
        'focal_length' => 'setFocalLength',
        'iso' => 'setIso',
        'orientation' => 'setOrientation',
        'taken_date_time' => 'setTakenDateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'camera_make' => 'getCameraMake',
        'camera_model' => 'getCameraModel',
        'exposure_denominator' => 'getExposureDenominator',
        'exposure_numerator' => 'getExposureNumerator',
        'f_number' => 'getFNumber',
        'focal_length' => 'getFocalLength',
        'iso' => 'getIso',
        'orientation' => 'getOrientation',
        'taken_date_time' => 'getTakenDateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('camera_make', $data ?? [], null);
        $this->setIfExists('camera_model', $data ?? [], null);
        $this->setIfExists('exposure_denominator', $data ?? [], null);
        $this->setIfExists('exposure_numerator', $data ?? [], null);
        $this->setIfExists('f_number', $data ?? [], null);
        $this->setIfExists('focal_length', $data ?? [], null);
        $this->setIfExists('iso', $data ?? [], null);
        $this->setIfExists('orientation', $data ?? [], null);
        $this->setIfExists('taken_date_time', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['taken_date_time']) && !preg_match("/^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?([Zz]|[+-][0-9][0-9]:[0-9][0-9])$/", $this->container['taken_date_time'])) {
            $invalidProperties[] = "invalid value for 'taken_date_time', must be conform to the pattern /^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?([Zz]|[+-][0-9][0-9]:[0-9][0-9])$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets camera_make
     *
     * @return string|null
     */
    public function getCameraMake(): ?string
    {
        return $this->container['camera_make'];
    }

    /**
     * Sets camera_make
     *
     * @param string|null $camera_make Camera manufacturer. Read-only.
     *
     * @return $this
     */
    public function setCameraMake(?string $camera_make): static
    {
        if (is_null($camera_make)) {
            throw new InvalidArgumentException('non-nullable camera_make cannot be null');
        }
        $this->container['camera_make'] = $camera_make;

        return $this;
    }

    /**
     * Gets camera_model
     *
     * @return string|null
     */
    public function getCameraModel(): ?string
    {
        return $this->container['camera_model'];
    }

    /**
     * Sets camera_model
     *
     * @param string|null $camera_model Camera model. Read-only.
     *
     * @return $this
     */
    public function setCameraModel(?string $camera_model): static
    {
        if (is_null($camera_model)) {
            throw new InvalidArgumentException('non-nullable camera_model cannot be null');
        }
        $this->container['camera_model'] = $camera_model;

        return $this;
    }

    /**
     * Gets exposure_denominator
     *
     * @return float|null
     */
    public function getExposureDenominator(): ?float
    {
        return $this->container['exposure_denominator'];
    }

    /**
     * Sets exposure_denominator
     *
     * @param float|null $exposure_denominator The denominator for the exposure time fraction from the camera. Read-only.
     *
     * @return $this
     */
    public function setExposureDenominator(?float $exposure_denominator): static
    {
        if (is_null($exposure_denominator)) {
            throw new InvalidArgumentException('non-nullable exposure_denominator cannot be null');
        }
        $this->container['exposure_denominator'] = $exposure_denominator;

        return $this;
    }

    /**
     * Gets exposure_numerator
     *
     * @return float|null
     */
    public function getExposureNumerator(): ?float
    {
        return $this->container['exposure_numerator'];
    }

    /**
     * Sets exposure_numerator
     *
     * @param float|null $exposure_numerator The numerator for the exposure time fraction from the camera. Read-only.
     *
     * @return $this
     */
    public function setExposureNumerator(?float $exposure_numerator): static
    {
        if (is_null($exposure_numerator)) {
            throw new InvalidArgumentException('non-nullable exposure_numerator cannot be null');
        }
        $this->container['exposure_numerator'] = $exposure_numerator;

        return $this;
    }

    /**
     * Gets f_number
     *
     * @return float|null
     */
    public function getFNumber(): ?float
    {
        return $this->container['f_number'];
    }

    /**
     * Sets f_number
     *
     * @param float|null $f_number The F-stop value from the camera. Read-only.
     *
     * @return $this
     */
    public function setFNumber(?float $f_number): static
    {
        if (is_null($f_number)) {
            throw new InvalidArgumentException('non-nullable f_number cannot be null');
        }
        $this->container['f_number'] = $f_number;

        return $this;
    }

    /**
     * Gets focal_length
     *
     * @return float|null
     */
    public function getFocalLength(): ?float
    {
        return $this->container['focal_length'];
    }

    /**
     * Sets focal_length
     *
     * @param float|null $focal_length The focal length from the camera. Read-only.
     *
     * @return $this
     */
    public function setFocalLength(?float $focal_length): static
    {
        if (is_null($focal_length)) {
            throw new InvalidArgumentException('non-nullable focal_length cannot be null');
        }
        $this->container['focal_length'] = $focal_length;

        return $this;
    }

    /**
     * Gets iso
     *
     * @return int|null
     */
    public function getIso(): ?int
    {
        return $this->container['iso'];
    }

    /**
     * Sets iso
     *
     * @param int|null $iso The ISO value from the camera. Read-only.
     *
     * @return $this
     */
    public function setIso(?int $iso): static
    {
        if (is_null($iso)) {
            throw new InvalidArgumentException('non-nullable iso cannot be null');
        }
        $this->container['iso'] = $iso;

        return $this;
    }

    /**
     * Gets orientation
     *
     * @return int|null
     */
    public function getOrientation(): ?int
    {
        return $this->container['orientation'];
    }

    /**
     * Sets orientation
     *
     * @param int|null $orientation The orientation value from the camera. Read-only.
     *
     * @return $this
     */
    public function setOrientation(?int $orientation): static
    {
        if (is_null($orientation)) {
            throw new InvalidArgumentException('non-nullable orientation cannot be null');
        }
        $this->container['orientation'] = $orientation;

        return $this;
    }

    /**
     * Gets taken_date_time
     *
     * @return \DateTime|null
     */
    public function getTakenDateTime(): ?\DateTime
    {
        return $this->container['taken_date_time'];
    }

    /**
     * Sets taken_date_time
     *
     * @param \DateTime|null $taken_date_time Represents the date and time the photo was taken. Read-only.
     *
     * @return $this
     */
    public function setTakenDateTime(?\DateTime $taken_date_time): static
    {
        if (is_null($taken_date_time)) {
            throw new InvalidArgumentException('non-nullable taken_date_time cannot be null');
        }

        if ((!preg_match("/^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?([Zz]|[+-][0-9][0-9]:[0-9][0-9])$/", ObjectSerializer::toString($taken_date_time)))) {
            throw new InvalidArgumentException("invalid value for \$taken_date_time when calling Photo., must conform to the pattern /^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?([Zz]|[+-][0-9][0-9]:[0-9][0-9])$/.");
        }

        $this->container['taken_date_time'] = $taken_date_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


